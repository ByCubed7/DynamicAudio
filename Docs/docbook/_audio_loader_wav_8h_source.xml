<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__audio_loader_wav_8h_source" xml:lang="en-US">
<title>AudioLoaderWav.h</title>
<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 
3 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&quot;Result.h&quot;</emphasis>
8 
9 <emphasis role="preprocessor">#include&#32;&lt;windows.h&gt;</emphasis>&#32;
10 <emphasis role="preprocessor">#include&#32;&lt;playsoundapi.h&gt;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&lt;mmsystem.h&gt;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
13 <emphasis role="preprocessor">#pragma&#32;comment(lib,&#32;&quot;winmm.lib&quot;)</emphasis>
14 
15 
16 
17 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_audio_loader_wav">AudioLoaderWav</link>
18 {
19 <emphasis role="comment">//private:</emphasis>
20 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;FORMAT[4]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;W&apos;</emphasis>,<emphasis role="charliteral">&apos;A&apos;</emphasis>,<emphasis role="charliteral">&apos;V&apos;</emphasis>,<emphasis role="charliteral">&apos;E&apos;</emphasis>&#32;};
21 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ID_RIFF[4]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;R&apos;</emphasis>,<emphasis role="charliteral">&apos;I&apos;</emphasis>,<emphasis role="charliteral">&apos;F&apos;</emphasis>,<emphasis role="charliteral">&apos;F&apos;</emphasis>&#32;};
22 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ID_FMT[4]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>,<emphasis role="charliteral">&apos;m&apos;</emphasis>,<emphasis role="charliteral">&apos;t&apos;</emphasis>,<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;};
23 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ID_DATA[4]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>,<emphasis role="charliteral">&apos;a&apos;</emphasis>,<emphasis role="charliteral">&apos;t&apos;</emphasis>,<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;};
24 
25 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFORMAT(uint8_t*&#32;<emphasis role="keywordtype">id</emphasis>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;memcmp(<emphasis role="keywordtype">id</emphasis>,&#32;FORMAT,&#32;4)&#32;==&#32;0;&#32;}
26 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isRIFF(uint8_t*&#32;<emphasis role="keywordtype">id</emphasis>)&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;memcmp(<emphasis role="keywordtype">id</emphasis>,&#32;ID_RIFF,&#32;4)&#32;==&#32;0;&#32;}
27 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFMT(uint8_t*&#32;<emphasis role="keywordtype">id</emphasis>)&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;memcmp(<emphasis role="keywordtype">id</emphasis>,&#32;ID_FMT,&#32;4)&#32;&#32;==&#32;0;&#32;}
28 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDATA(uint8_t*&#32;<emphasis role="keywordtype">id</emphasis>)&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;memcmp(<emphasis role="keywordtype">id</emphasis>,&#32;ID_DATA,&#32;4)&#32;==&#32;0;&#32;}
29 
30 
31 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;chunk&#32;of&#32;info&#32;</emphasis>
32 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_audio_loader_wav_1_1_chunk_info">ChunkInfo</link>&#32;{
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;chunkID[4];
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;chunkSize;
35 &#32;&#32;&#32;&#32;};
36 
37 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_audio_loader_wav_1_1_r_i_f_f">RIFF</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_audio_loader_wav_1_1_chunk_info">ChunkInfo</link>&#32;{
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;&#32;format[4];
39 &#32;&#32;&#32;&#32;};
40 
41 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Format&#32;of&#32;the&#32;sound&#32;infomation</emphasis>
42 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_audio_loader_wav_1_1_format">Format</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_audio_loader_wav_1_1_chunk_info">ChunkInfo</link>&#32;{
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint16_t&#32;audioFormat;&#32;&#32;&#32;<emphasis role="comment">//&#32;Audio&#32;format&#32;1=PCM,&#32;6=mulaw,&#32;7=alaw,&#32;&#32;257=IBM&#32;Mu-Law,&#32;258=IBM&#32;A-Law,&#32;259=ADPCM</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint16_t&#32;numChannels;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;channels&#32;1=Mono&#32;2=Sterio</emphasis>
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;sampleRate;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sampling&#32;Frequency&#32;in&#32;Hz</emphasis>
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;byteRate;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bytes&#32;per&#32;second</emphasis>
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint16_t&#32;blockAlign;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2=16-bit&#32;mono,&#32;4=16-bit&#32;stereo</emphasis>
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint16_t&#32;bitsPerSample;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;bits&#32;per&#32;sample</emphasis>
49 &#32;&#32;&#32;&#32;};
50 
51 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contains&#32;the&#32;sound&#32;infomation&#32;and&#32;raw&#32;data</emphasis>
52 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BUG:&#32;We&#32;assume&#32;16-bit&#32;monochannel&#32;samples</emphasis>
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_audio_loader_wav_1_1_data">Data</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_audio_loader_wav_1_1_chunk_info">ChunkInfo</link>&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t*&#32;data;
55 
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;number&#32;of&#32;elements&#32;in&#32;the&#32;data&#32;array</emphasis>
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size()<emphasis role="keyword">&#32;const&#32;</emphasis>{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;chunkSize&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(uint8_t);
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
60 &#32;&#32;&#32;&#32;};
61 
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_audio_loader_wav_1_1_wav">Wav</link>&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_audio_loader_wav_1_1_r_i_f_f">RIFF</link>&#32;riff;
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_audio_loader_wav_1_1_format">Format</link>&#32;fmt;
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_audio_loader_wav_1_1_data">Data</link>&#32;data;
66 
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_audio_loader_wav_1_1_wav">Wav</link>()&#32;:
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;riff(),&#32;fmt(),&#32;data()&#32;{}
69 
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_audio_loader_wav_1_1_wav">Wav</link>(<link linkend="_struct_audio_loader_wav_1_1_r_i_f_f">RIFF</link>&#32;riff_,&#32;<link linkend="_struct_audio_loader_wav_1_1_format">Format</link>&#32;fmt_,&#32;<link linkend="_struct_audio_loader_wav_1_1_data">Data</link>&#32;data_)&#32;:
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;riff(riff_),&#32;fmt(fmt_),&#32;data(data_)&#32;{}
72 
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;rawAll(uint8_t*&amp;&#32;start,&#32;uint32_t&amp;&#32;size)<emphasis role="keyword">&#32;const</emphasis>
75 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;riff&#32;chunksize:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;riff.chunkSize&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_audio_loader_wav_1_1_chunk_info">ChunkInfo</link>)&#32;&lt;&lt;&#32;std::endl;
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;attempt&#32;size:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_audio_loader_wav_1_1_r_i_f_f">RIFF</link>)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_audio_loader_wav_1_1_format">Format</link>)&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_audio_loader_wav_1_1_data">Data</link>)&#32;-&#32;<emphasis role="keyword">sizeof</emphasis>(uint8_t*)&#32;+&#32;data.size())&#32;&lt;&lt;&#32;std::endl;
78 
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;(riff.chunkSize&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_audio_loader_wav_1_1_chunk_info">ChunkInfo</link>))&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(uint8_t);
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;uint8_t[size];
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t*&#32;ptr&#32;=&#32;start;
82 
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t*&#32;target&#32;=&#32;start&#32;+&#32;size;
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;start:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(<emphasis role="keywordtype">void</emphasis>*)start&#32;&lt;&lt;&#32;std::endl;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;target:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(<emphasis role="keywordtype">void</emphasis>*)target&#32;&lt;&lt;&#32;std::endl;
87 
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//memcpy_s(ptr,&#32;size,&#32;&amp;riff,&#32;sizeof(RIFF));</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(<link linkend="_struct_audio_loader_wav_1_1_r_i_f_f">RIFF</link>*)ptr&#32;=&#32;riff;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_audio_loader_wav_1_1_r_i_f_f">RIFF</link>);
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//memcpy_s(ptr,&#32;size,&#32;&amp;fmt,&#32;sizeof(Format));</emphasis>
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(<link linkend="_struct_audio_loader_wav_1_1_format">Format</link>*)ptr&#32;=&#32;fmt;
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_audio_loader_wav_1_1_format">Format</link>);
96 
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(<link linkend="_struct_audio_loader_wav_1_1_data">Data</link>*)ptr&#32;=&#32;data;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_audio_loader_wav_1_1_data">Data</link>)&#32;-&#32;<emphasis role="keyword">sizeof</emphasis>(uint8_t*);
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;dataSize&#32;=&#32;data.chunkSize&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(uint8_t);
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;is&#32;same:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(ptr&#32;+&#32;dataSize&#32;==&#32;target)&#32;&lt;&lt;&#32;std::endl;
103 
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t*&#32;firs&#32;=&#32;data.data;
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t*&#32;last&#32;=&#32;data.data&#32;+&#32;dataSize;
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::copy(firs,&#32;last,&#32;ptr);</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr&#32;+=&#32;dataSize;
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;is&#32;same:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(ptr&#32;==&#32;target)&#32;&lt;&lt;&#32;std::endl;
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;arr:&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size&#32;-&#32;data.size();&#32;i++)&#32;{
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;(char)*(start&#32;+&#32;i);
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;done&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//memcpy(rawTar,&#32;&amp;data.data,&#32;data.chunkSize&#32;/&#32;sizeof(uint8_t));</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
120 
121 &#32;&#32;&#32;&#32;};
122 
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Result&#32;loadRawFile(std::string&#32;filepath,&#32;<link linkend="_struct_audio_loader_wav_1_1_wav">Wav</link>&amp;&#32;wav)
124 &#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Open&#32;File</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;ifs{&#32;filepath,&#32;std::ios_base::binary&#32;};
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ifs.fail())&#32;<emphasis role="keywordflow">return</emphasis>&#32;CannotOpenFile;
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;file&#32;length</emphasis>
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//ifs.seekg(0,&#32;ifs.end);</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;length&#32;=&#32;ifs.tellg();&#32;//&#32;tellg&#32;returns&#32;pos</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//ifs.seekg(0,&#32;ifs.beg);</emphasis>
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;RIFF&#32;header</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RIFF&#32;riff;
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifs.read((<emphasis role="keywordtype">char</emphasis>*)&amp;riff,&#32;<emphasis role="keyword">sizeof</emphasis>(RIFF));
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ifs&#32;||&#32;!isRIFF(riff.chunkID)&#32;||&#32;!isFORMAT(riff.format))&#32;{
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifs.close();
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;BadFormatting;
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;chunk&#32;infos&#32;iteratively</emphasis>
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ChunkInfo&#32;ch;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Format&#32;fmt;
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Data&#32;data;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;fmt_read&#32;=&#32;<emphasis role="keyword">false</emphasis>;
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;data_read&#32;=&#32;<emphasis role="keyword">false</emphasis>;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ifs.read((<emphasis role="keywordtype">char</emphasis>*)&amp;ch,&#32;<emphasis role="keyword">sizeof</emphasis>(ChunkInfo)))
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fmt&#32;chunk</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isFMT(ch.chunkID))&#32;
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::copy(std::begin(ch.chunkID),&#32;std::end(ch.chunkID),&#32;std::begin(fmt.chunkID));
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmt.chunkSize&#32;=&#32;ch.chunkSize;
155 
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifs.read((<emphasis role="keywordtype">char</emphasis>*)&amp;fmt&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(ChunkInfo),&#32;ch.chunkSize);&#32;<emphasis role="comment">//&#32;We&apos;ve&#32;already&#32;read&#32;ChunkInfo</emphasis>
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fmt_read)&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Multiple&#32;FMT&#32;chunks&#32;found&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmt_read&#32;=&#32;<emphasis role="keyword">true</emphasis>;
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;chunk</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isDATA(ch.chunkID))&#32;
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::copy(std::begin(ch.chunkID),&#32;std::end(ch.chunkID),&#32;std::begin(data.chunkID));
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.chunkSize&#32;=&#32;ch.chunkSize;
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.data&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;uint8_t[data.size()];
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifs.read((<emphasis role="keywordtype">char</emphasis>*)data.data&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(ChunkInfo),&#32;ch.chunkSize);&#32;<emphasis role="comment">//&#32;We&apos;ve&#32;already&#32;read&#32;ChunkInfo</emphasis>
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(data_read)&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Multiple&#32;Data&#32;chunks&#32;found&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data_read&#32;=&#32;<emphasis role="keyword">true</emphasis>;
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Otherwise,&#32;skip</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;ifs.seekg(ch.chunkSize,&#32;std::ios_base::cur);
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
179 
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ifs.close();
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!data_read&#32;||&#32;!fmt_read)&#32;<emphasis role="keywordflow">return</emphasis>&#32;ProblemReadingData;
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wav&#32;=&#32;Wav(
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;riff,&#32;fmt,&#32;data
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Success;
189 &#32;&#32;&#32;&#32;}
190 
191 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Move&#32;to&#32;results?</emphasis>
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;checkResultForErrors(Result&#32;result)&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(result)&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Success:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CannotOpenFile:
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;open&#32;file&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BadFormatting:
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Bad&#32;formatting&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
203 
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ProblemReadingData:
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Problem&#32;when&#32;reading&#32;data&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
208 
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
210 &#32;&#32;&#32;&#32;}
211 
212 <emphasis role="keyword">public</emphasis>:
213 
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Wav&#32;load(std::string&#32;filepath)
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Wav&#32;wavFile;
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result&#32;res&#32;=&#32;loadRawFile(filepath,&#32;wavFile);
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkResultForErrors(res))&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="stringliteral">&quot;Error&#32;occurred&quot;</emphasis>;
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wavFile;
220 &#32;&#32;&#32;&#32;}
221 
222 
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_printInfo(<emphasis role="keyword">const</emphasis>&#32;Wav&amp;&#32;wav)
224 &#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;--&#32;RIFF&#32;--&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
226 
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;id:&#32;&quot;</emphasis>;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;val&#32;:&#32;wav.riff.chunkID)&#32;std::cout&#32;&lt;&lt;&#32;(char)val;
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;(should&#32;be:&#32;&quot;</emphasis>;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;val&#32;:&#32;ID_RIFF)&#32;std::cout&#32;&lt;&lt;&#32;(char)val;
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;size:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.riff.chunkSize)&#32;&lt;&lt;&#32;std::endl;
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;format:&#32;&quot;</emphasis>;
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;4;&#32;i++)&#32;std::cout&#32;&lt;&lt;&#32;wav.riff.format[i];
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;(should&#32;be:&#32;&quot;</emphasis>;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;val&#32;:&#32;FORMAT)&#32;std::cout&#32;&lt;&lt;&#32;(char)val;
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
237 
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
239 
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;--&#32;FMT&#32;--&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
241 
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;id:&#32;&quot;</emphasis>;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;val&#32;:&#32;wav.fmt.chunkID)&#32;std::cout&#32;&lt;&lt;&#32;(char)val;
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;(should&#32;be:&#32;&quot;</emphasis>;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;val&#32;:&#32;ID_FMT)&#32;std::cout&#32;&lt;&lt;&#32;(char)val;
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
245 
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;chunkSize:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.fmt.chunkSize)&#32;&lt;&lt;&#32;std::endl;
247 
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;audioFormat:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.fmt.audioFormat)&#32;&lt;&lt;&#32;std::endl;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;numChannels:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.fmt.numChannels)&#32;&lt;&lt;&#32;std::endl;
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;sampleRate:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.fmt.sampleRate)&#32;&lt;&lt;&#32;std::endl;
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;byteRate:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.fmt.byteRate)&#32;&lt;&lt;&#32;std::endl;
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;blockAlign:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.fmt.blockAlign)&#32;&lt;&lt;&#32;std::endl;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;bitsPerSample:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.fmt.bitsPerSample)&#32;&lt;&lt;&#32;std::endl;
254 
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;
256 
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;--&#32;DATA&#32;--&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
258 
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;id:&#32;&quot;</emphasis>;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;val&#32;:&#32;wav.data.chunkID)&#32;std::cout&#32;&lt;&lt;&#32;(char)val;
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;(should&#32;be:&#32;&quot;</emphasis>;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;val&#32;:&#32;ID_DATA)&#32;std::cout&#32;&lt;&lt;&#32;(char)val;
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
262 
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;chunkSize:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::to_string(wav.data.chunkSize)&#32;&lt;&lt;&#32;std::endl;
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;&quot;nb&#32;of&#32;samples:&#32;&quot;&#32;&lt;&lt;&#32;std::to_string(wav.data.nb_of_samples)&#32;&lt;&lt;&#32;std::endl;</emphasis>
266 &#32;&#32;&#32;&#32;}
267 
268 
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debug_play(<emphasis role="keyword">const</emphasis>&#32;Wav&amp;&#32;wav)
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO</emphasis>
272 
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PlaySoundA((LPCSTR)&#32;&quot;C:\\kenny&#32;g.WAV&quot;,&#32;NULL,&#32;SND_FILENAME&#32;|&#32;SND_ASYNC);</emphasis>
274 
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;&quot;Playing&#32;sound&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
276 
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t*&#32;value&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;size;
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wav.rawAll(value,&#32;size);
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;(value&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;&lt;&lt;&#32;std::endl;
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//for&#32;(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;size;&#32;i++)&#32;{</emphasis>
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;(char)*(value&#32;+&#32;i);</emphasis>
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
286 
287 
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PlaySound(
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(LPCWSTR)(<emphasis role="keywordtype">char</emphasis>*)(value),
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NULL,
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SND_MEMORY&#32;<emphasis role="comment">//|&#32;SND_SYNC</emphasis>
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
293 &#32;&#32;&#32;&#32;}
294 };
</programlisting></section>
